// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String       @id @default(cuid())
  email        String       @unique
  name         String
  password     String       // ハッシュ化されたパスワード
  timeRecords  TimeRecord[]
  sessions     Session[]
  accounts     Account[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model TimeRecord {
  id                 String       @id @default(cuid())
  date               String       // YYYY-MM-DD形式
  userId             String       @default("default") // ユーザーID（外部キー）
  user               User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  totalWorkDuration  Int          @default(0) // 1日の総勤務時間（分）
  entries            ClockEntry[]
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@unique([date, userId])
  @@map("time_records")
}

model ClockEntry {
  id           String      @id @default(cuid())
  timeRecordId String
  timeRecord   TimeRecord  @relation(fields: [timeRecordId], references: [id], onDelete: Cascade)
  clockIn      DateTime    // 出勤時刻
  clockOut     DateTime?   // 退勤時刻（null = まだ退勤していない）
  duration     Int?        // この期間の勤務時間（分）
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("clock_entries")
}
